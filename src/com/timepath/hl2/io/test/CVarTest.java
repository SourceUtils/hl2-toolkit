package com.timepath.hl2.io.test;

import com.timepath.hl2.io.CVarList;
import com.timepath.hl2.io.CVarList.CVar;
import com.timepath.plaf.x.filechooser.NativeFileChooser;
import java.awt.Color;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Pattern;
import java.util.regex.PatternSyntaxException;
import javax.swing.RowFilter;
import javax.swing.RowSorter;
import javax.swing.SortOrder;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author timepath
 */
public class CVarTest extends javax.swing.JFrame {

    /**
     * Creates new form CVarTest
     */
    public CVarTest() {
        initComponents();
        sorter = new TableRowSorter<TableModel>(jTable1.getModel());
        Comparator<String> comparator = new Comparator<String>() {
            public int compare(String s1, String s2) {
                return s1.replaceFirst("\\+", "").replaceFirst("-", "").toLowerCase().compareTo(s2.replaceFirst("\\+", "").replaceFirst("-", "").toLowerCase());
            }
        };
        sorter.setComparator(0, comparator);

        List<RowSorter.SortKey> sortKeys = new ArrayList<RowSorter.SortKey>();
        sortKeys.add(new RowSorter.SortKey(0, SortOrder.ASCENDING));
        sorter.setSortKeys(sortKeys);

        jTable1.setRowSorter(sorter);
        jTextField1.getDocument().addDocumentListener(new DocumentListener() {
            public void insertUpdate(DocumentEvent de) {
                newFilter();
            }

            public void removeUpdate(DocumentEvent de) {
                newFilter();
            }

            public void changedUpdate(DocumentEvent de) {
                newFilter();
            }
        });
    }

    private Map<String, CVar> map;

    private void newFilter() {
        jLabel1.setText(Integer.toString(sorter.getModelRowCount()));
        try {
            String str = jTextField1.getText();
            if(!regexCheckBox.isSelected()) {
                str = Pattern.quote(str);
            }
            if(!caseSensitiveCheckBox.isSelected()) {
                str = "(?i)" + str;
            }
            RowFilter<TableModel, Object> rf = RowFilter.regexFilter(str, new int[]{0, 1, 2, 3, 4, 5, 6});
            sorter.setRowFilter(rf);
            jLabel5.setText(Integer.toString(sorter.getViewRowCount()));
            jTextField1.setForeground(Color.BLACK);
        } catch(PatternSyntaxException e) {
            jTextField1.setForeground(Color.RED);
        }
    }

    private final TableRowSorter<TableModel> sorter;

    private void insertRows(Map<String, CVar> map) {
        DefaultTableModel m = (DefaultTableModel) jTable1.getModel();
        m.setNumRows(0);
        for(Entry<String, CVar> entry : map.entrySet()) {
            CVar var = entry.getValue();
            m.addRow(new Object[]{var.getName(), var.getValue(), var.getDefaultValue(), var.getMinimum(), var.getMaximum(), Arrays.toString(var.getTags().toArray(new String[0])), var.getDesc()});
        }
        newFilter();
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        statusBar1 = new com.timepath.swing.StatusBar();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jTextField1 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        regexCheckBox = new javax.swing.JCheckBox();
        caseSensitiveCheckBox = new javax.swing.JCheckBox();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("CVar listing");

        jTable1.setAutoCreateRowSorter(true);
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Value", "Default", "Min", "Max", "Tags", "Description"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        statusBar1.setRollover(true);

        jLabel2.setText(" Total convars/concommands: ");
        statusBar1.add(jLabel2);

        jLabel1.setText("0");
        statusBar1.add(jLabel1);
        statusBar1.add(jSeparator1);

        jLabel4.setText("Showing: ");
        statusBar1.add(jLabel4);

        jLabel5.setText("0");
        statusBar1.add(jLabel5);

        jLabel3.setText("Find:");

        regexCheckBox.setMnemonic('R');
        regexCheckBox.setText("Regular Expression");
        regexCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                regexCheckBoxActionPerformed(evt);
            }
        });

        caseSensitiveCheckBox.setMnemonic('M');
        caseSensitiveCheckBox.setText("Match Case");
        caseSensitiveCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                caseSensitiveCheckBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(caseSensitiveCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(regexCheckBox)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(regexCheckBox)
                    .addComponent(caseSensitiveCheckBox))
                .addGap(0, 0, 0))
        );

        jMenu1.setText("File");

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem1.setText("Open");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(statusBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 600, Short.MAX_VALUE)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 217, Short.MAX_VALUE)
                .addGap(0, 0, 0)
                .addComponent(statusBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        try {
            File f[] = new NativeFileChooser().setTitle("Select cvarlist").choose();
            if(f != null) {
                map = CVarList.analyzeList(f[0], new HashMap<String, CVar>());
                insertRows(map);
            }
        } catch(IOException ex) {
            Logger.getLogger(CVarTest.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void regexCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_regexCheckBoxActionPerformed
        newFilter();
    }//GEN-LAST:event_regexCheckBoxActionPerformed

    private void caseSensitiveCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_caseSensitiveCheckBoxActionPerformed
        newFilter();
    }//GEN-LAST:event_caseSensitiveCheckBoxActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CVarTest().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox caseSensitiveCheckBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JCheckBox regexCheckBox;
    private com.timepath.swing.StatusBar statusBar1;
    // End of variables declaration//GEN-END:variables

    private static final Logger LOG = Logger.getLogger(CVarTest.class.getName());

}
